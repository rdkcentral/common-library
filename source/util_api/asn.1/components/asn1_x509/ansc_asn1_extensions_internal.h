/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: ansc_asn1_Extensions_internal.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        The Internal functions defined for ASN.1 objects

        *   ANSC_ASN1_EXTENSIONS
        *   ANSC_ASN1_EXTENSION
        *   ANSC_ASN1_AUTHORITYKEYIDENTIFIER
        *   ANSC_ASN1_KEYIDENTIFIER
        *   ANSC_ASN1_GENERALNAMES
        *   ANSC_ASN1_GENERALNAME
        *   ANSC_ASN1_ORADDRESS
        *   ANSC_ASN1_EDIPARTYNAME
        *   ANSC_ASN1_KEYUSAGE
        *   ANSC_ASN1_EXTKEYUSAGESYNTAX
        *   ANSC_ASN1_BASICCONSTRAINTS
        *   ANSC_ASN1_PRIVATEKEYUSAGEPERIOD
        *   ANSC_ASN1_CERTIFICATEPOLICIES
        *   ANSC_ASN1_POLICYINFORMATION
        *   ANSC_ASN1_POLICYQUALIFIERS
        *   ANSC_ASN1_POLICYQUALIFIERINFO
        *   ANSC_ASN1_POLICYQUALIFIER
        *   ANSC_ASN1_USERNOTICE
        *   ANSC_ASN1_NOTICEREFERENCE
        *   ANSC_ASN1_DISPLAYTEXT
        *   ANSC_ASN1_POLICYMAPPINGS
        *   ANSC_ASN1_NAMECONSTRAINTS
        *   ANSC_ASN1_GENERALSUBTREES
        *   ANSC_ASN1_GENERALSUBTREE
        *   ANSC_ASN1_POLICYCONSTRAINTS
        *   ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES
        *   ANSC_ASN1_CRLNUMBER
        *   ANSC_ASN1_CRLDISTPOINTSSYNTAX
        *   ANSC_ASN1_DISTRIBUTIONPOINT
        *   ANSC_ASN1_DISTRIBUTIONPOINTNAME
        *   ANSC_ASN1_REASONFLAGS
        *   ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT
        *   ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX
        *   ANSC_ASN1_ACCESSDESCRIPTION
        *   ANSC_ASN1_CRLREASON
        *   ANSC_ASN1_HOLDINSTRUCTIONCODE
        *   ANSC_ASN1_INVALIDITYDATE
        *   ANSC_ASN1_POLICYMAPPING
        *   ANSC_ASN1_NOTICENUMBERS
        *   ANSC_ASN1_DELTACRLINDICATOR
        *   ANSC_ASN1_ATTRIBUTESSYNTAX
        *   ANSC_ASN1_BIOMETRICSSYNTAX
        *   ANSC_ASN1_BIOMETRICDATA
        *   ANSC_ASN1_TYPEOFBIOMETRICDATA
        *   ANSC_ASN1_QCSTATEMENTSSYNTAX
        *   ANSC_ASN1_QCSTATEMENT
        *   ANSC_ASN1_ENTRUSTVERSIONINFO
        *   ANSC_ASN1_EXTENSIONVALUE


    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        ASNMAGIC ANSC CODE GENERATOR 1.0

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   05/07/2002  initial revision
        *   05/08/2002  add more apis for EXTENSION object

 **********************************************************************/


#ifndef  _ANSC_ASN1_EXTENSIONS_INTERNAL_H
#define  _ANSC_ASN1_EXTENSIONS_INTERNAL_H

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSIONS

 Extensions ::= SequenceOf Extension  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1ExtensionsIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1ExtensionsCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSION

 Extension ::= Sequence 
     {
                            extnID OID 
                          critical BOOL 
                         extnValue OctetString 
         EXTRA:
                     extensionValue ExtensionValue 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1ExtensionCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1ExtensionGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1ExtensionCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1ExtensionGetExtraChildName
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_HANDLE
AnscAsn1ExtensionCreateExtraChild
    (
        ANSC_HANDLE                 hThisObject
    );

/*
 *  Manually added functions;
 */
BOOLEAN
AnscAsn1ExtensionGetExtensionType
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );
        
BOOLEAN
AnscAsn1ExtensionIsCritical
    (
        ANSC_HANDLE                 hThisObject
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_AUTHORITYKEYIDENTIFIER

 AuthorityKeyIdentifier ::= Sequence 
     {
                     keyIdentifier [CON 0] IMP KeyIdentifier OPT
               authorityCertIssuer [CON 1] IMP GeneralNames OPT
                      serialNumber [CON 2] IMP Integer OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1AuthorityKeyIdentifierCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1AuthorityKeyIdentifierGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1AuthorityKeyIdentifierCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_KEYIDENTIFIER

 KeyIdentifier ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALNAMES

 GeneralNames ::= SequenceOf GeneralName  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1GeneralNamesIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1GeneralNamesCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/*
 *  Manually added functions;
 */
BOOLEAN
AnscAsn1GeneralNamesAddAltName
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pAltName
    );

BOOLEAN
AnscAsn1GeneralNamesAddKb5Name
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hRealmName,
        ANSC_HANDLE                 hPrinName
    );

ANSC_STATUS
AnscAsn1GeneralNamesGetKB5Name
    (
        ANSC_HANDLE                 hThisObject,        
        ANSC_HANDLE                 hRealmName,
        ANSC_HANDLE                 hPrinName
    );

ANSC_STATUS
AnscAsn1GeneralNamesGetAltNameByMask
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       typeMask,
        PUCHAR                      pOutBuffer,
        PULONG                      pLength
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALNAME

 GeneralName ::= Choice 
     {
                         otherName [CON 0] IMP OtherName 
                        rfc822Name [CON 1] IMP IA5String 
                           dNSName [CON 2] IMP IA5String 
                       x400Address [CON 3] IMP ORAddress 
                     directoryName [CON 4] IMP Name 
                      ediPartyName [CON 5] IMP EDIPartyName 
                               uri [CON 6] IMP IA5String 
                         iPAddress [CON 7] IMP OctetString 
                      registeredID [CON 8] IMP OID 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1GeneralNameCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1GeneralNameCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1GeneralNameGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

BOOLEAN
AnscAsn1GeneralNameGetChoiceTagValue
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       uIndex,
        PASN_OBJECT_FORM_TYPE       pAttr,
        PULONG                      pTagValue
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ORADDRESS

 ORAddress ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_EDIPARTYNAME

 EDIPartyName ::= Sequence 
     {
                      nameAssigner [CON 0] IMP DirectoryString OPT
                         partyName [CON 1] IMP DirectoryString 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1EDIPartyNameCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1EDIPartyNameGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1EDIPartyNameCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_KEYUSAGE

 KeyUsage ::= BitString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTKEYUSAGESYNTAX

 ExtKeyUsageSyntax ::= SequenceOf OID  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1ExtKeyUsageSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1ExtKeyUsageSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_BASICCONSTRAINTS

 BasicConstraints ::= Sequence 
     {
                                cA BOOL 
                 pathLenConstraint Integer 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1BasicConstraintsCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1BasicConstraintsGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1BasicConstraintsCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_PRIVATEKEYUSAGEPERIOD

 PrivateKeyUsagePeriod ::= Sequence 
     {
                         notBefore [CON 0] IMP GeneralizedTime OPT
                          notAfter [CON 1] IMP GeneralizedTime OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1PrivateKeyUsagePeriodCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1PrivateKeyUsagePeriodGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PrivateKeyUsagePeriodCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CERTIFICATEPOLICIES

 CertificatePolicies ::= SequenceOf PolicyInformation  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1CertificatePoliciesIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1CertificatePoliciesCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYINFORMATION

 PolicyInformation ::= Sequence 
     {
                  policyIdentifier OID 
                  policyQualifiers PolicyQualifiers 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1PolicyInformationCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1PolicyInformationGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PolicyInformationCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIERS

 PolicyQualifiers ::= SequenceOf PolicyQualifierInfo  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1PolicyQualifiersIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1PolicyQualifiersCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIERINFO

 PolicyQualifierInfo ::= Sequence 
     {
                 policyQualifierID OID 
                         qualifier PolicyQualifier 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1PolicyQualifierInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1PolicyQualifierInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PolicyQualifierInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIER

 PolicyQualifier ::= Choice 
     {
                        userNotice UserNotice 
                            cpsuri IA5String 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1PolicyQualifierCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1PolicyQualifierCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1PolicyQualifierGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

LONG
AnscAsn1PolicyQualifierGetChoiceByOID
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );

PCHAR
AnscAsn1PolicyQualifierGetOIDValueByMask
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_USERNOTICE

 UserNotice ::= Sequence 
     {
                         noticeRef NoticeReference 
                      explicitText DisplayText 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1UserNoticeCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1UserNoticeGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1UserNoticeCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_NOTICEREFERENCE

 NoticeReference ::= Sequence 
     {
                      organization DisplayText 
                     noticeNumbers NoticeNumbers 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1NoticeReferenceCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1NoticeReferenceGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1NoticeReferenceCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISPLAYTEXT

 DisplayText ::= Choice 
     {
                     visibleString VisibleString 
                         bmpString BMPString 
                        utf8String UTF8String 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1DisplayTextCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1DisplayTextCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1DisplayTextGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

BOOLEAN
AnscAsn1DisplayTextGetChoiceTagValue
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       uIndex,
        PASN_OBJECT_FORM_TYPE       pAttr,
        PULONG                      pTagValue
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYMAPPINGS

 PolicyMappings ::= SequenceOf PolicyMapping  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1PolicyMappingsIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1PolicyMappingsCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_NAMECONSTRAINTS

 NameConstraints ::= Sequence 
     {
                 permittedSubtrees [CON 0] IMP GeneralSubtrees OPT
                  excludedSubtrees [CON 1] IMP GeneralSubtrees OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1NameConstraintsCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1NameConstraintsGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1NameConstraintsCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALSUBTREES

 GeneralSubtrees ::= SequenceOf GeneralSubTree  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1GeneralSubtreesIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1GeneralSubtreesCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALSUBTREE

 GeneralSubTree ::= Sequence 
     {
                              base GeneralName 
                           minimum [CON 0] IMP Integer DEF
                           maximum [CON 1] IMP Integer OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1GeneralSubTreeCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1GeneralSubTreeGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1GeneralSubTreeCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYCONSTRAINTS

 PolicyConstraints ::= Sequence 
     {
             requireExplicitPolicy [CON 0] IMP Integer OPT
              inhibitPolicyMapping [CON 1] IMP Integer OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1PolicyConstraintsCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1PolicyConstraintsGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PolicyConstraintsCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES

 SubjectDirectoryAttributes ::= SequenceOf Attribute  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1SubjectDirectoryAttributesIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1SubjectDirectoryAttributesCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLNUMBER

 CRLNumber ::= Integer 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLDISTPOINTSSYNTAX

 CRLDistPointsSyntax ::= SequenceOf DistributionPoint  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1CRLDistPointsSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1CRLDistPointsSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISTRIBUTIONPOINT

 DistributionPoint ::= Sequence 
     {
                 distributionPoint [CON 0] IMP DistributionPointName OPT
                           reasons [CON 1] IMP ReasonFlags OPT
                         cRLIssuer [CON 2] IMP GeneralNames OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1DistributionPointCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1DistributionPointGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1DistributionPointCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISTRIBUTIONPOINTNAME

 DistributionPointName ::= Choice 
     {
                          fullName [CON 0] IMP GeneralNames 
           nameRelativeToCRLIssuer [CON 1] IMP RelativeDistinguishedName 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1DistributionPointNameCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1DistributionPointNameCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1DistributionPointNameGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

BOOLEAN
AnscAsn1DistributionPointNameGetChoiceTagValue
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       uIndex,
        PASN_OBJECT_FORM_TYPE       pAttr,
        PULONG                      pTagValue
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_REASONFLAGS

 ReasonFlags ::= BitString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT

 IssuingDistributionPoint ::= Sequence 
     {
                 distributionPoint [CON 0] IMP DistributionPointName OPT
           onlyConstrainsUserCerts [CON 1] IMP BOOL DEF
             onlyConstrainsCACerts [CON 2] IMP BOOL DEF
                   onlySomeReasons [CON 3] IMP ReasonFlags OPT
                       indirectCRL [CON 4] IMP BOOL DEF
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1IssuingDistributionPointCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1IssuingDistributionPointGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1IssuingDistributionPointCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX

 AuthorityInfoAccessSyntax ::= SequenceOf AccessDescription  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1AuthorityInfoAccessSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1AuthorityInfoAccessSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ACCESSDESCRIPTION

 AccessDescription ::= Sequence 
     {
                      accessMethod OID 
                    accessLocation GeneralName 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1AccessDescriptionCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1AccessDescriptionGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1AccessDescriptionCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLREASON

 CRLReason ::= Enumerate 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_HOLDINSTRUCTIONCODE

 HoldInstructionCode ::= OID 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_INVALIDITYDATE

 InvalidityDate ::= GeneralizedTime 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYMAPPING

 PolicyMapping ::= Sequence 
     {
              issuerDomainPolicyID OID 
             subjectDomainPolicyID OID 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1PolicyMappingCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1PolicyMappingGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PolicyMappingCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_NOTICENUMBERS

 NoticeNumbers ::= SequenceOf Integer  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1NoticeNumbersIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1NoticeNumbersCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DELTACRLINDICATOR

 DeltaCRLIndicator ::= CRLNumber 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_ATTRIBUTESSYNTAX

 AttributesSyntax ::= SequenceOf Attribute  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1AttributesSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1AttributesSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_BIOMETRICSSYNTAX

 BiometricsSyntax ::= SequenceOf BiometricData  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1BiometricsSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1BiometricsSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_BIOMETRICDATA

 BiometricData ::= Sequence 
     {
               typeOfBiometricData TypeOfBiometricData 
                     hashAlgorithm AlgorithmIdentifier 
                 biometricDataHash OctetString 
                     sourceDataUri IA5String 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1BiometricDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1BiometricDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1BiometricDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_TYPEOFBIOMETRICDATA

 TypeOfBiometricData ::= Choice 
     {
                    predefinedType Integer 
                  biometricDataOID OID 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1TypeOfBiometricDataCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1TypeOfBiometricDataCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1TypeOfBiometricDataGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

BOOLEAN
AnscAsn1TypeOfBiometricDataGetChoiceTagValue
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       uIndex,
        PASN_OBJECT_FORM_TYPE       pAttr,
        PULONG                      pTagValue
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_QCSTATEMENTSSYNTAX

 QCStatementsSyntax ::= SequenceOf QCStatement  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1QCStatementsSyntaxIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1QCStatementsSyntaxCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_QCSTATEMENT

 QCStatement ::= Sequence 
     {
                      statementOID OID 
                     statementInfo OctetString 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1QCStatementCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1QCStatementGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1QCStatementCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENTRUSTVERSIONINFO

 EntrustVersionInfo ::= Sequence 
     {
                           version GeneralString 
                             usage BitString 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1EntrustVersionInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1EntrustVersionInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1EntrustVersionInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSIONVALUE

 ExtensionValue ::= Choice 
     {
            authorityKeyIdentifier AuthorityKeyIdentifier 
                          keyUsage KeyUsage 
             privateKeyUsagePeriod PrivateKeyUsagePeriod 
                      certPolicies CertificatePolicies 
                    policyMappings PolicyMappings 
            subDirectoryAttributes SubjectDirectoryAttributes 
                  basicConstraints BasicConstraints 
                   nameConstraints NameConstraints 
                 policyConstraints PolicyConstraints 
               crlDistPointsSyntax CRLDistPointsSyntax 
                 extKeyUsageSyntax ExtKeyUsageSyntax 
              authInfoAccessSyntax AuthorityInfoAccessSyntax 
                         crlNumber CRLNumber 
          issuingDistributionPoint IssuingDistributionPoint 
                         crlReason CRLReason 
               holdInstructionCode HoldInstructionCode 
                    invalidityDate InvalidityDate 
                      isserAltName GeneralNames 
                    subjectAltName GeneralNames 
                 deltaCRLIndicator CRLNumber 
                 certificateIssuer GeneralNames 
              subjectKeyIdentifier OctetString 
                  biometricsSyntax BiometricsSyntax 
                qcStatementsSyntax QCStatementsSyntax 
                  netscapeCertType BitString 
                   netscapeComment IA5String 
                        commonName DirectoryString 
                entrustVersionInfo EntrustVersionInfo 
                caKeyCertIndexPair Integer 
                          msString MSString 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1ExtensionValueCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1ExtensionValueCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1ExtensionValueGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

LONG
AnscAsn1ExtensionValueGetChoiceByOID
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );

PCHAR
AnscAsn1ExtensionValueGetOIDValueByMask
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );


#endif  /*_ANSC_ASN1_EXTENSIONS_INTERNAL_H*/

