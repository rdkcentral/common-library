/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: ansc_asn1_ContentInfo_internal.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        The Internal functions defined for ASN.1 objects

        *   ANSC_ASN1_CONTENTINFO
        *   ANSC_ASN1_DATA
        *   ANSC_ASN1_SIGNEDDATA
        *   ANSC_ASN1_DIGESTALGORITHMIDENTIFIERS
        *   ANSC_ASN1_CERTIFICATES
        *   ANSC_ASN1_CERTIFICATEREVOCATIONLISTS
        *   ANSC_ASN1_SIGNERINFOS
        *   ANSC_ASN1_SIGNERINFO
        *   ANSC_ASN1_ISSUERANDSERIALNUMBER
        *   ANSC_ASN1_DIGESTENCRYPTIONALGORITHMIDENTIFIER
        *   ANSC_ASN1_ENCRYPTEDDIGEST
        *   ANSC_ASN1_DIGESTINFO
        *   ANSC_ASN1_ENVELOPEDDATA
        *   ANSC_ASN1_RECIPIENTINFOS
        *   ANSC_ASN1_ENCRYPTEDCONTENTINFO
        *   ANSC_ASN1_RECIPIENTINFO
        *   ANSC_ASN1_ENCRYPTEDCONTENT
        *   ANSC_ASN1_PKCS7ENCRYPTEDKEY
        *   ANSC_ASN1_SIGNEDANDENVELOPEDDATA
        *   ANSC_ASN1_DIGESTEDDATA
        *   ANSC_ASN1_DIGEST
        *   ANSC_ASN1_ENCRYPTEDDATA
        *   ANSC_ASN1_CONTENTDATA


    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        ASNMAGIC ANSC CODE GENERATOR 1.0

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   05/07/2002  initial revision
        *   05/08/2002  two functions add added to ContentInfo object
        *   05/09/2002  more funcions are added to SignedData object
        *   08/08/2002  more apis for SignedData object

 **********************************************************************/


#ifndef  _ANSC_ASN1_CONTENTINFO_INTERNAL_H
#define  _ANSC_ASN1_CONTENTINFO_INTERNAL_H

/**********************************************************************

 OBJECT -- ANSC_ASN1_CONTENTINFO

 ContentInfo ::= Sequence 
     {
                       contentType OID 
                           content [CON 0] ContentData OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1ContentInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1ContentInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1ContentInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1PKCS7GetSignedData
    (
        ANSC_HANDLE                 hThisObject
    );

void
AnscAsn1PKCS7SetTypeAndData
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType,
        ANSC_HANDLE                 hData
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DATA

 Data ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_SIGNEDDATA

 SignedData ::= Sequence 
     {
                           version Integer 
                  digestAlgorithms DigestAlgorithmIdentifiers 
                       contentInfo ContentInfo 
                      certificates [CON 0] IMP Certificates OPT
                              crls [CON 1] IMP CertificateRevocationLists OPT
                       signerInfos SignerInfos 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1SignedDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1SignedDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1SignedDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_STATUS
AnscAsn1SignedDataAddDigestAlgor
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );

/***************************************************************
 *
 * This one is important for generating SignedData.
 *
 * We suggest to call this api after you initiate all other fields.
 *
 * If Add certificate only, the pSignProc can be set as NULL;
 * If signature is required, the last 3 parameters should be inputted,
 * a new signerInfo will be created and added.
 *
 ***************************************************************/
ANSC_STATUS
AnscAsn1SignedDataAddCertificate
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 pCertificate,
        CRYPT_SIGNDATA_PROC         pSignProc,    /* proc to sign the data */
        ANSC_HANDLE                 hParameter,    /* the parameter of above proc */
        HASH_TYPE                   hashType
    );

ANSC_HANDLE
AnscAsn1SignedDataGetCertificateByIndex
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       ulIndex
    );

ANSC_HANDLE
AnscAsn1SignedDataGetSignedHandle
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_STATUS
AnscAsn1SignedDataSetSignedHandle
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hSignHandle
    );

ULONG
AnscAsn1SignedDataGetTotalCerts
    (
        ANSC_HANDLE                 hThisObject
    );

/*
 *  Verify the certificate chain.
 *
 *  It's optional for the verifier to provide the hCACert to
 *  verify the certificate chain.
 *
 *  If failed to find the issuer or verify the signature of certain
 *  cert in the chain, returns the error and put the cert index in
 *  the buffer of pUlQuestionIndex.
 */
ANSC_STATUS
AnscAsn1SignedDataVerifyCertChain
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCACert,
        PULONG                      pUlQuestionIndex,
        BOOLEAN                     bCheckTime
    );

/*
 *  Verify the Digest in the signerInfos
 *
 *  If failed to verify the digest of certain
 *  cert in the chain, returns the error and put the cert index in
 *  the buffer of pUlQuestionIndex.
 */
ANSC_STATUS
AnscAsn1SignedDataVerifyMessageDigest
    (
        ANSC_HANDLE                 hThisObject,
        PULONG                      pUlQuestionIndex
    );


ANSC_HANDLE
AnscAsn1SignedDataLookinForIssuer
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert
    );

ANSC_HANDLE
AnscAsn1SignedDataGetFirstCertOfTheChain
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_HANDLE
AnscAsn1SignedDataGetLastCertOfTheChain
    (
        ANSC_HANDLE                 hThisObject
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DIGESTALGORITHMIDENTIFIERS

 DigestAlgorithmIdentifiers ::= SetOf DigestAlgorithmIdentifier  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1DigestAlgorithmIdentifiersIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1DigestAlgorithmIdentifiersCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CERTIFICATES

 Certificates ::= SetOf Certificate  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1CertificatesIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1CertificatesCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CERTIFICATEREVOCATIONLISTS

 CertificateRevocationLists ::= SetOf CRL  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1CertificateRevocationListsIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1CertificateRevocationListsCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_SIGNERINFOS

 SignerInfos ::= SetOf SignerInfo  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1SignerInfosIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1SignerInfosCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_SIGNERINFO

 SignerInfo ::= Sequence 
     {
                           version Integer 
             issuerAndSerialNumber IssuerAndSerialNumber 
                   digestAlgorithm DigestAlgorithmIdentifier 
           authenticatedAttributes [CON 0] IMP Attributes OPT
         digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier 
                   encryptedDigest EncryptedDigest 
         unauthenticatedAttributes [CON 1] IMP Attributes OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1SignerInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1SignerInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1SignerInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ISSUERANDSERIALNUMBER

 IssuerAndSerialNumber ::= Sequence 
     {
                            issuer Name 
                      serialNumber Integer 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1IssuerAndSerialNumberCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1IssuerAndSerialNumberGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1IssuerAndSerialNumberCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DIGESTENCRYPTIONALGORITHMIDENTIFIER

 DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENCRYPTEDDIGEST

 EncryptedDigest ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_DIGESTINFO

 DigestInfo ::= Sequence 
     {
                         digestAlg DigestAlgorithmIdentifier 
                            digest OctetString 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1DigestInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1DigestInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1DigestInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1DigestInfoGetDigestAlg
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_HANDLE
AnscAsn1DigestInfoGetDigest
    (
        ANSC_HANDLE                 hThisObject
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENVELOPEDDATA

 EnvelopedData ::= Sequence 
     {
                           version Integer 
                    recipientInfos RecipientInfos 
              encryptedContentInfo EncryptedContentInfo 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1EnvelopedDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1EnvelopedDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1EnvelopedDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_RECIPIENTINFOS

 RecipientInfos ::= SetOf RecipientInfo  {}

 **********************************************************************/

ANSC_STATUS
AnscAsn1RecipientInfosIsChildValid
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hChild
    );

ANSC_HANDLE
AnscAsn1RecipientInfosCreateChild
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bAddItIn
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENCRYPTEDCONTENTINFO

 EncryptedContentInfo ::= Sequence 
     {
                       contentType OID 
        contentEncryptionAlgorithm EncryptionAlgorithmIdentifier 
                           content [CON 0] IMP EncryptedContent OPT
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1EncryptedContentInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1EncryptedContentInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1EncryptedContentInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_RECIPIENTINFO

 RecipientInfo ::= Sequence 
     {
                           version Integer 
              issuerAndSerialNumer IssuerAndSerialNumber 
            keyEncryptionAlgorithm EncryptionAlgorithmIdentifier 
                      encryptedKey PKCS7EncryptedKey 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1RecipientInfoCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1RecipientInfoGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1RecipientInfoCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENCRYPTEDCONTENT

 EncryptedContent ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_PKCS7ENCRYPTEDKEY

 PKCS7EncryptedKey ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_SIGNEDANDENVELOPEDDATA

 SignedAndEnvelopedData ::= Sequence 
     {
                           version Integer 
                    recipientInfos RecipientInfos 
                  digestAlgorithms DigestAlgorithmIdentifiers 
              encryptedContentInfo EncryptedContentInfo 
                      certificates [CON 0] IMP Certificates OPT
                              crls [CON 1] IMP CertificateRevocationLists OPT
                       signerInfos SignerInfos 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1SignedAndEnvelopedDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1SignedAndEnvelopedDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1SignedAndEnvelopedDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DIGESTEDDATA

 DigestedData ::= Sequence 
     {
                           version Integer 
                   digestAlgorithm DigestAlgorithmIdentifier 
                       contentInfo ContentInfo 
                            digest Digest 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1DigestedDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1DigestedDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1DigestedDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_DIGEST

 Digest ::= OctetString 

 **********************************************************************/

 /* No internal function is required for this object. */    

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENCRYPTEDDATA

 EncryptedData ::= Sequence 
     {
                           version Integer 
              encryptedContentInfo EncryptedContentInfo 
     }

 **********************************************************************/

PANSC_ATTR_OBJECT
AnscAsn1EncryptedDataCreateChildAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PCHAR
AnscAsn1EncryptedDataGetChildName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

ANSC_HANDLE
AnscAsn1EncryptedDataCreateChildObject
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

/**********************************************************************

 OBJECT -- ANSC_ASN1_CONTENTDATA

 ContentData ::= Choice 
     {
                              data Data 
                        signedData SignedData 
                      envelopeData EnvelopedData 
            signedAndEnvelopedData SignedAndEnvelopedData 
                        digestData DigestedData 
                     encryptedData EncryptedData 
                          authPack AuthPack 
     }

 **********************************************************************/

ANSC_HANDLE
AnscAsn1ContentDataCreateSelection
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       index
    );

PANSC_ATTR_OBJECT
AnscAsn1ContentDataCreateSelectionAttr
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

PCHAR
AnscAsn1ContentDataGetSelectionName
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );

LONG
AnscAsn1ContentDataGetChoiceByOID
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );

PCHAR
AnscAsn1ContentDataGetOIDValueByMask
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       selType
    );


#endif  /*_ANSC_ASN1_CONTENTINFO_INTERNAL_H*/

