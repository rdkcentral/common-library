/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: pki_entity_internal.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        This interface is for the entity of PKI implementation.

        The entity is responsible for generating key pair, pkcs10
        certificate request, self-signed certificate.

    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        Bin Zhu

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   08/13/2002  initial revision
        *   12/01/2003  add name field support

 **********************************************************************/


#ifndef  _PKI_ENTITY_INTERNAL_H
#define  _PKI_ENTITY_INTERNAL_H

void 
InitPKIEntityAPIs
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_STATUS
PKIEntityRemove
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_STATUS
PKIEntityRemoveEntityCert
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 *  Get the total count of the CA chain
 ***************************************************************/
ULONG
PKIEntityGetCACount
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 *  Get the CA cert with given index;
 **************************************************************/
ANSC_HANDLE
PKIEntityGetCAByIndex
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       ulIndex
    );

/**************************************************************
 * Generate handle procs, such as PKCS10, Selfsigned Cert Handles
 *
 * NOTE: The caller is responsible to free it
 *
 * pHandle->AsnFree(pHandle);
 **************************************************************/
ANSC_HANDLE
PKIEntityCreatePKCS10
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 * Generate Encoding, such as PKCS10, Selfsigned Cert encodings
 *
 * NOTE: The caller is responsible to free the buffer
 *
 * AnscFreeMemory(...)
 **************************************************************/
PUCHAR
PKIEntityCreatePKCS10Encoding
    (
        ANSC_HANDLE                 hThisObject,
        PULONG                      pLength
    );

/**************************************************************
 * Get certain handle
 **************************************************************/
ANSC_HANDLE
PKIEntityGetEntityCert
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 * Set certain handle
 **************************************************************/
ANSC_STATUS
PKIEntitySetCertHandle
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert
    );

ANSC_STATUS
PKIEntitySetIssuedCert
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

ANSC_STATUS
PKIEntitySetPrivateKeyInfo
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

/**************************************************************
 *
 * Export the cert and private key info
 *
 * This function will create memory to holde the cert
 * and private key info encoding, the caller is responsible to 
 * free them.
 *
 *  If ppCertEncoding == NULL, cert encoding is not required;
 *  If ppPriKeyInfo   == NULL, priKeyInfo encoding is not required;
 *
 **************************************************************/
ANSC_STATUS
PKIEntityExportInfo
    (
        ANSC_HANDLE                 hThisObject,
        PVOID*                      ppCertEncoding,
        PULONG                      pLenOfCert,
        PVOID*                      ppPriKeyInfo,
        PULONG                      pLenOfKeyInfo
    );

ANSC_STATUS
PKIEntityExportToFile
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pCertFile,
        PCHAR                       pKeyInfoFile
    );

/**************************************************************
 * CryptoAPI functions
 **************************************************************/
PKI_KEY_TYPE
PKIEntityGetKeyType
    (
        ANSC_HANDLE                 pCryptHandle 
    );

LONG
PKIEntityGetKeyLength
    (
        ANSC_HANDLE                 pCryptHandle 
    );


ANSC_STATUS
PKIEntityGetPublicKey
    (
        ANSC_HANDLE                 pCryptHandle,
        PPKI_KEY_TYPE               pKeyType,
        ANSC_HANDLE                 pKeyParam
    );

ANSC_STATUS
PKIEntitySignData
    (
        ANSC_HANDLE                 pCryptHandle,
        PUCHAR                      pDataWillBeSigned,
        ULONG                       lengthOfData,
        SIGNATURE_TYPE              SignatureType,
        PUCHAR                      pDataSigned,
        PULONG                      pLength
    );

BOOLEAN
PKIEntityVerify
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pDataWillBeSigned,
        ULONG                       lengthOfData,
        SIGNATURE_TYPE              SignatureType,
        PUCHAR                      pDataSigned,
        ULONG                       signLength
    );

ANSC_STATUS
PKIEntityDecryptData
    (
        ANSC_HANDLE                 pCryptHandle ,
        PUCHAR                      pDataWillBeDecrypted,
        ULONG                       lengthOfData,
        PUCHAR                      pDataDecrypted,
        PULONG                      pLength
    );

ANSC_STATUS
PKIEntityEncryptData
    (
        ANSC_HANDLE                 pCryptHandle ,
        PUCHAR                      pDataWillBeDecrypted,
        ULONG                       lengthOfData,
        PUCHAR                      pDataDecrypted,
        PULONG                      pLength
    );

/**********************************************************************
 *
 * Issue Certificate to user entity, if it's a CA;
 *
 **********************************************************************/
ANSC_STATUS
PKIEntityIssueCert
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hUserObject,
        ULONG                       nYears,       /* Validity time */
        ULONG                       ulKeyUsage,
        BOOLEAN                     bAddSubKeyIdenExtension,
        BOOLEAN                     bIsCA,
        LONG                        pathLength
    );

/**********************************************************************
 *
 * Get/Set name
 *
 **********************************************************************/
PCHAR
PKIEntityGetName
    (
        ANSC_HANDLE                 hThisObject
    );

ANSC_STATUS
PKIEntitySetName
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pString
    );

#endif  /*_PKI_ENTITY_INTERNAL_H*/


