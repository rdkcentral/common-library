/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: ansc_asn1_Extensions_interface.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        The ASN.1 object defined in this file

        *   ANSC_ASN1_EXTENSIONS
        *   ANSC_ASN1_EXTENSION
        *   ANSC_ASN1_AUTHORITYKEYIDENTIFIER
        *   ANSC_ASN1_KEYIDENTIFIER
        *   ANSC_ASN1_GENERALNAMES
        *   ANSC_ASN1_GENERALNAME
        *   ANSC_ASN1_ORADDRESS
        *   ANSC_ASN1_EDIPARTYNAME
        *   ANSC_ASN1_KEYUSAGE
        *   ANSC_ASN1_EXTKEYUSAGESYNTAX
        *   ANSC_ASN1_BASICCONSTRAINTS
        *   ANSC_ASN1_PRIVATEKEYUSAGEPERIOD
        *   ANSC_ASN1_CERTIFICATEPOLICIES
        *   ANSC_ASN1_POLICYINFORMATION
        *   ANSC_ASN1_POLICYQUALIFIERS
        *   ANSC_ASN1_POLICYQUALIFIERINFO
        *   ANSC_ASN1_POLICYQUALIFIER
        *   ANSC_ASN1_USERNOTICE
        *   ANSC_ASN1_NOTICEREFERENCE
        *   ANSC_ASN1_DISPLAYTEXT
        *   ANSC_ASN1_POLICYMAPPINGS
        *   ANSC_ASN1_NAMECONSTRAINTS
        *   ANSC_ASN1_GENERALSUBTREES
        *   ANSC_ASN1_GENERALSUBTREE
        *   ANSC_ASN1_POLICYCONSTRAINTS
        *   ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES
        *   ANSC_ASN1_CRLNUMBER
        *   ANSC_ASN1_CRLDISTPOINTSSYNTAX
        *   ANSC_ASN1_DISTRIBUTIONPOINT
        *   ANSC_ASN1_DISTRIBUTIONPOINTNAME
        *   ANSC_ASN1_REASONFLAGS
        *   ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT
        *   ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX
        *   ANSC_ASN1_ACCESSDESCRIPTION
        *   ANSC_ASN1_CRLREASON
        *   ANSC_ASN1_HOLDINSTRUCTIONCODE
        *   ANSC_ASN1_INVALIDITYDATE
        *   ANSC_ASN1_POLICYMAPPING
        *   ANSC_ASN1_NOTICENUMBERS
        *   ANSC_ASN1_DELTACRLINDICATOR
        *   ANSC_ASN1_ATTRIBUTESSYNTAX
        *   ANSC_ASN1_BIOMETRICSSYNTAX
        *   ANSC_ASN1_BIOMETRICDATA
        *   ANSC_ASN1_TYPEOFBIOMETRICDATA
        *   ANSC_ASN1_QCSTATEMENTSSYNTAX
        *   ANSC_ASN1_QCSTATEMENT
        *   ANSC_ASN1_ENTRUSTVERSIONINFO
        *   ANSC_ASN1_EXTENSIONVALUE


    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        ASNMAGIC ANSC CODE GENERATOR 1.0

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   05/07/2002  initial revision
        *   05/08/2002  add more apis for EXTENSION object

 **********************************************************************/


#ifndef  _ANSC_ASN1_EXTENSIONS_INTERFACE_H
#define  _ANSC_ASN1_EXTENSIONS_INTERFACE_H

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSIONS

 Extensions ::= SequenceOf Extension  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_EXTENSIONS,    \
         *PANSC_ASN1_EXTENSIONS;

#define  ACCESS_ANSC_ASN1_EXTENSIONS(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_EXTENSIONS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSION

 Extension ::= Sequence 
     {
                            extnID OID 
                          critical BOOL 
                         extnValue OctetString 
         EXTRA:
                     extensionValue ExtensionValue 
     }

 **********************************************************************/
typedef BOOLEAN
(*PFN_EXTENSION_GET_TYPE)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pOIDString
    );
        
typedef BOOLEAN
(*PFN_EXTENSION_IS_CRITICAL)
    (
        ANSC_HANDLE                 hThisObject
    );

#define  ANSC_ASN1_EXTENSION_CLASS_CONTENT                            \
    /* duplication of the base object class content */                \
    ANSC_ASN1_SEQUENCE_CLASS_CONTENT                                  \
    /* start of object class content */                               \
    PFN_EXTENSION_GET_TYPE          GetExtensionType;                 \
    PFN_EXTENSION_IS_CRITICAL       IsCritical;                       \
    /* end of object class content */                                 \


typedef  struct
_ANSC_ASN1_EXTENSION
{
    ANSC_ASN1_EXTENSION_CLASS_CONTENT
}
ANSC_ASN1_EXTENSION,  *PANSC_ASN1_EXTENSION;

#define  ACCESS_ANSC_ASN1_EXTENSION(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_EXTENSION, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_AUTHORITYKEYIDENTIFIER

 AuthorityKeyIdentifier ::= Sequence 
     {
                     keyIdentifier [CON 0] IMP KeyIdentifier OPT
               authorityCertIssuer [CON 1] IMP GeneralNames OPT
                      serialNumber [CON 2] IMP Integer OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_AUTHORITYKEYIDENTIFIER_CLASS_CONTENT ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_AUTHORITYKEYIDENTIFIER
{
    ANSC_ASN1_AUTHORITYKEYIDENTIFIER_CLASS_CONTENT
}
ANSC_ASN1_AUTHORITYKEYIDENTIFIER,  *PANSC_ASN1_AUTHORITYKEYIDENTIFIER;

#define  ACCESS_ANSC_ASN1_AUTHORITYKEYIDENTIFIER(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_AUTHORITYKEYIDENTIFIER, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_KEYIDENTIFIER

 KeyIdentifier ::= OctetString 

 **********************************************************************/

typedef  ANSC_ASN1_OCTETSTRING ANSC_ASN1_KEYIDENTIFIER,    \
         *PANSC_ASN1_KEYIDENTIFIER;

#define  ACCESS_ANSC_ASN1_KEYIDENTIFIER(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_KEYIDENTIFIER, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALNAMES

 GeneralNames ::= SequenceOf GeneralName  {}

 **********************************************************************/
typedef BOOLEAN
(*PFN_GN_ADD_ALTNAME)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pAltName
    );

typedef BOOLEAN
(*PFN_GN_ADD_KB5NAME)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hRealmName,
        ANSC_HANDLE                 hPrinName
    );

typedef ANSC_STATUS
(*PFN_GN_GET_KB5NAME)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hPrinName,
        ANSC_HANDLE                 hRealmName
    );

typedef ANSC_STATUS
(*PFN_GN_GET_NAME)
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       typeMask,
        PUCHAR                      pOutBuffer,
        PULONG                      pLength
    );

#define  ANSC_ASN1_GENERALNAMES_CLASS_CONTENT                         \
    /* duplication of the base object class content */                \
    ANSC_ASN1_SEQUENCEOF_CLASS_CONTENT                                \
    /* start of object class content */                               \
    PFN_GN_ADD_ALTNAME              AddAltName;                       \
    PFN_GN_ADD_KB5NAME              AddKb5Name;                       \
    PFN_GN_GET_NAME                 GetAltNameByMask;                 \
    PFN_GN_GET_KB5NAME              GetKB5Name;                       \
    /* end of object class content */                                 \

typedef  struct
_ANSC_ASN1_GENERALNAMES
{
    ANSC_ASN1_GENERALNAMES_CLASS_CONTENT
}
ANSC_ASN1_GENERALNAMES,  *PANSC_ASN1_GENERALNAMES;

#define  ACCESS_ANSC_ASN1_GENERALNAMES(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_GENERALNAMES, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALNAME

 GeneralName ::= Choice 
     {
                         otherName [CON 0] IMP OtherName 
                        rfc822Name [CON 1] IMP IA5String 
                           dNSName [CON 2] IMP IA5String 
                       x400Address [CON 3] IMP ORAddress 
                     directoryName [CON 4] IMP Name 
                      ediPartyName [CON 5] IMP EDIPartyName 
                               uri [CON 6] IMP IA5String 
                         iPAddress [CON 7] IMP OctetString 
                      registeredID [CON 8] IMP OID 
     }

 **********************************************************************/

#define  GENERALNAME_MASK_OTHERNAME                                0x00
#define  GENERALNAME_MASK_RFC822NAME                               0x01
#define  GENERALNAME_MASK_DNSNAME                                  0x02
#define  GENERALNAME_MASK_X400ADDRESS                              0x03
#define  GENERALNAME_MASK_DIRECTORYNAME                            0x04
#define  GENERALNAME_MASK_EDIPARTYNAME                             0x05
#define  GENERALNAME_MASK_URI                                      0x06
#define  GENERALNAME_MASK_IPADDRESS                                0x07
#define  GENERALNAME_MASK_REGISTEREDID                             0x08
#define  GENERALNAME_MAXI_MASK                                     0x08

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_GENERALNAME,*PANSC_ASN1_GENERALNAME;

#define  ACCESS_ANSC_ASN1_GENERALNAME(p)   ACCESS_CONTAINER(p, ANSC_ASN1_GENERALNAME, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_ORADDRESS

 ORAddress ::= OctetString 

 **********************************************************************/

typedef  ANSC_ASN1_OCTETSTRING ANSC_ASN1_ORADDRESS, *PANSC_ASN1_ORADDRESS;

#define  ACCESS_ANSC_ASN1_ORADDRESS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_ORADDRESS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_EDIPARTYNAME

 EDIPartyName ::= Sequence 
     {
                      nameAssigner [CON 0] IMP DirectoryString OPT
                         partyName [CON 1] IMP DirectoryString 
     }

 **********************************************************************/

#define  ANSC_ASN1_EDIPARTYNAME_CLASS_CONTENT           ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_EDIPARTYNAME
{
    ANSC_ASN1_EDIPARTYNAME_CLASS_CONTENT
}
ANSC_ASN1_EDIPARTYNAME,  *PANSC_ASN1_EDIPARTYNAME;

#define  ACCESS_ANSC_ASN1_EDIPARTYNAME(p)    ACCESS_CONTAINER(p, ANSC_ASN1_EDIPARTYNAME, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_KEYUSAGE

 KeyUsage ::= BitString 

 **********************************************************************/

typedef  ANSC_ASN1_BITSTRING ANSC_ASN1_KEYUSAGE,*PANSC_ASN1_KEYUSAGE;

#define  ACCESS_ANSC_ASN1_KEYUSAGE(p)       ACCESS_CONTAINER(p, ANSC_ASN1_KEYUSAGE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTKEYUSAGESYNTAX

 ExtKeyUsageSyntax ::= SequenceOf OID  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_EXTKEYUSAGESYNTAX,*PANSC_ASN1_EXTKEYUSAGESYNTAX;

#define  ACCESS_ANSC_ASN1_EXTKEYUSAGESYNTAX(p) ACCESS_CONTAINER(p, ANSC_ASN1_EXTKEYUSAGESYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_BASICCONSTRAINTS

 BasicConstraints ::= Sequence 
     {
                                cA BOOL 
                 pathLenConstraint Integer 
     }

 **********************************************************************/

#define  ANSC_ASN1_BASICCONSTRAINTS_CLASS_CONTENT       ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_BASICCONSTRAINTS
{
    ANSC_ASN1_BASICCONSTRAINTS_CLASS_CONTENT
}
ANSC_ASN1_BASICCONSTRAINTS,  *PANSC_ASN1_BASICCONSTRAINTS;

#define  ACCESS_ANSC_ASN1_BASICCONSTRAINTS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_BASICCONSTRAINTS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_PRIVATEKEYUSAGEPERIOD

 PrivateKeyUsagePeriod ::= Sequence 
     {
                         notBefore [CON 0] IMP GeneralizedTime OPT
                          notAfter [CON 1] IMP GeneralizedTime OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_PRIVATEKEYUSAGEPERIOD_CLASS_CONTENT  ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_PRIVATEKEYUSAGEPERIOD
{
    ANSC_ASN1_PRIVATEKEYUSAGEPERIOD_CLASS_CONTENT
}
ANSC_ASN1_PRIVATEKEYUSAGEPERIOD,  *PANSC_ASN1_PRIVATEKEYUSAGEPERIOD;

#define  ACCESS_ANSC_ASN1_PRIVATEKEYUSAGEPERIOD(p)    ACCESS_CONTAINER(p, ANSC_ASN1_PRIVATEKEYUSAGEPERIOD, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_CERTIFICATEPOLICIES

 CertificatePolicies ::= SequenceOf PolicyInformation  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_CERTIFICATEPOLICIES, *PANSC_ASN1_CERTIFICATEPOLICIES;

#define  ACCESS_ANSC_ASN1_CERTIFICATEPOLICIES(p)    ACCESS_CONTAINER(p, ANSC_ASN1_CERTIFICATEPOLICIES, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYINFORMATION

 PolicyInformation ::= Sequence 
     {
                  policyIdentifier OID 
                  policyQualifiers PolicyQualifiers 
     }

 **********************************************************************/

#define  ANSC_ASN1_POLICYINFORMATION_CLASS_CONTENT      ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_POLICYINFORMATION
{
    ANSC_ASN1_POLICYINFORMATION_CLASS_CONTENT
}
ANSC_ASN1_POLICYINFORMATION,  *PANSC_ASN1_POLICYINFORMATION;

#define  ACCESS_ANSC_ASN1_POLICYINFORMATION(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYINFORMATION, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIERS

 PolicyQualifiers ::= SequenceOf PolicyQualifierInfo  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_POLICYQUALIFIERS, *PANSC_ASN1_POLICYQUALIFIERS;

#define  ACCESS_ANSC_ASN1_POLICYQUALIFIERS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYQUALIFIERS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIERINFO

 PolicyQualifierInfo ::= Sequence 
     {
                 policyQualifierID OID 
                         qualifier PolicyQualifier 
     }

 **********************************************************************/

#define  ANSC_ASN1_POLICYQUALIFIERINFO_CLASS_CONTENT    ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_POLICYQUALIFIERINFO
{
    ANSC_ASN1_POLICYQUALIFIERINFO_CLASS_CONTENT
}
ANSC_ASN1_POLICYQUALIFIERINFO,  *PANSC_ASN1_POLICYQUALIFIERINFO;

#define  ACCESS_ANSC_ASN1_POLICYQUALIFIERINFO(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYQUALIFIERINFO, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYQUALIFIER

 PolicyQualifier ::= Choice 
     {
                        userNotice UserNotice 
                            cpsuri IA5String 
     }

 **********************************************************************/

#define  POLICYQUALIFIER_MASK_USERNOTICE                           0x00
#define  POLICYQUALIFIER_MASK_CPSURI                               0x01
#define  POLICYQUALIFIER_MAXI_MASK                                 0x01

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_POLICYQUALIFIER, *PANSC_ASN1_POLICYQUALIFIER;

#define  ACCESS_ANSC_ASN1_POLICYQUALIFIER(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYQUALIFIER, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_USERNOTICE

 UserNotice ::= Sequence 
     {
                         noticeRef NoticeReference 
                      explicitText DisplayText 
     }

 **********************************************************************/

#define  ANSC_ASN1_USERNOTICE_CLASS_CONTENT             ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_USERNOTICE
{
    ANSC_ASN1_USERNOTICE_CLASS_CONTENT
}
ANSC_ASN1_USERNOTICE,  *PANSC_ASN1_USERNOTICE;

#define  ACCESS_ANSC_ASN1_USERNOTICE(p)    ACCESS_CONTAINER(p, ANSC_ASN1_USERNOTICE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_NOTICEREFERENCE

 NoticeReference ::= Sequence 
     {
                      organization DisplayText 
                     noticeNumbers NoticeNumbers 
     }

 **********************************************************************/

#define  ANSC_ASN1_NOTICEREFERENCE_CLASS_CONTENT        ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_NOTICEREFERENCE
{
    ANSC_ASN1_NOTICEREFERENCE_CLASS_CONTENT
}
ANSC_ASN1_NOTICEREFERENCE,  *PANSC_ASN1_NOTICEREFERENCE;

#define  ACCESS_ANSC_ASN1_NOTICEREFERENCE(p)    ACCESS_CONTAINER(p, ANSC_ASN1_NOTICEREFERENCE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISPLAYTEXT

 DisplayText ::= Choice 
     {
                     visibleString VisibleString 
                         bmpString BMPString 
                        utf8String UTF8String 
     }

 **********************************************************************/

#define  DISPLAYTEXT_MASK_VISIBLESTRING                            0x00
#define  DISPLAYTEXT_MASK_BMPSTRING                                0x01
#define  DISPLAYTEXT_MASK_UTF8STRING                               0x02
#define  DISPLAYTEXT_MASK_IA5STRING                                0x03
#define  DISPLAYTEXT_MAXI_MASK                                     0x03

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_DISPLAYTEXT, *PANSC_ASN1_DISPLAYTEXT;

#define  ACCESS_ANSC_ASN1_DISPLAYTEXT(p)    ACCESS_CONTAINER(p, ANSC_ASN1_DISPLAYTEXT, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYMAPPINGS

 PolicyMappings ::= SequenceOf PolicyMapping  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_POLICYMAPPINGS, *PANSC_ASN1_POLICYMAPPINGS;

#define  ACCESS_ANSC_ASN1_POLICYMAPPINGS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYMAPPINGS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_NAMECONSTRAINTS

 NameConstraints ::= Sequence 
     {
                 permittedSubtrees [CON 0] IMP GeneralSubtrees OPT
                  excludedSubtrees [CON 1] IMP GeneralSubtrees OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_NAMECONSTRAINTS_CLASS_CONTENT        ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_NAMECONSTRAINTS
{
    ANSC_ASN1_NAMECONSTRAINTS_CLASS_CONTENT
}
ANSC_ASN1_NAMECONSTRAINTS,  *PANSC_ASN1_NAMECONSTRAINTS;

#define  ACCESS_ANSC_ASN1_NAMECONSTRAINTS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_NAMECONSTRAINTS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALSUBTREES

 GeneralSubtrees ::= SequenceOf GeneralSubTree  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_GENERALSUBTREES,*PANSC_ASN1_GENERALSUBTREES;

#define  ACCESS_ANSC_ASN1_GENERALSUBTREES(p)    ACCESS_CONTAINER(p, ANSC_ASN1_GENERALSUBTREES, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_GENERALSUBTREE

 GeneralSubTree ::= Sequence 
     {
                              base GeneralName 
                           minimum [CON 0] IMP Integer DEF
                           maximum [CON 1] IMP Integer OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_GENERALSUBTREE_CLASS_CONTENT         ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_GENERALSUBTREE
{
    ANSC_ASN1_GENERALSUBTREE_CLASS_CONTENT
}
ANSC_ASN1_GENERALSUBTREE,  *PANSC_ASN1_GENERALSUBTREE;

#define  ACCESS_ANSC_ASN1_GENERALSUBTREE(p)    ACCESS_CONTAINER(p, ANSC_ASN1_GENERALSUBTREE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYCONSTRAINTS

 PolicyConstraints ::= Sequence 
     {
             requireExplicitPolicy [CON 0] IMP Integer OPT
              inhibitPolicyMapping [CON 1] IMP Integer OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_POLICYCONSTRAINTS_CLASS_CONTENT      ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_POLICYCONSTRAINTS
{
    ANSC_ASN1_POLICYCONSTRAINTS_CLASS_CONTENT
}
ANSC_ASN1_POLICYCONSTRAINTS,  *PANSC_ASN1_POLICYCONSTRAINTS;

#define  ACCESS_ANSC_ASN1_POLICYCONSTRAINTS(p)    ACCESS_CONTAINER(p, ANSC_ASN1_POLICYCONSTRAINTS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES

 SubjectDirectoryAttributes ::= SequenceOf Attribute  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES, *PANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES;

#define  ACCESS_ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES(p)  ACCESS_CONTAINER(p, ANSC_ASN1_SUBJECTDIRECTORYATTRIBUTES, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLNUMBER

 CRLNumber ::= Integer 

 **********************************************************************/

typedef  ANSC_ASN1_INTEGER ANSC_ASN1_CRLNUMBER, *PANSC_ASN1_CRLNUMBER;

#define  ACCESS_ANSC_ASN1_CRLNUMBER(p)   ACCESS_CONTAINER(p, ANSC_ASN1_CRLNUMBER, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLDISTPOINTSSYNTAX

 CRLDistPointsSyntax ::= SequenceOf DistributionPoint  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_CRLDISTPOINTSSYNTAX, *PANSC_ASN1_CRLDISTPOINTSSYNTAX;

#define  ACCESS_ANSC_ASN1_CRLDISTPOINTSSYNTAX(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_CRLDISTPOINTSSYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISTRIBUTIONPOINT

 DistributionPoint ::= Sequence 
     {
                 distributionPoint [CON 0] IMP DistributionPointName OPT
                           reasons [CON 1] IMP ReasonFlags OPT
                         cRLIssuer [CON 2] IMP GeneralNames OPT
     }

 **********************************************************************/

#define  ANSC_ASN1_DISTRIBUTIONPOINT_CLASS_CONTENT      ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_DISTRIBUTIONPOINT
{
    ANSC_ASN1_DISTRIBUTIONPOINT_CLASS_CONTENT
}
ANSC_ASN1_DISTRIBUTIONPOINT,  *PANSC_ASN1_DISTRIBUTIONPOINT;

#define  ACCESS_ANSC_ASN1_DISTRIBUTIONPOINT(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_DISTRIBUTIONPOINT, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_DISTRIBUTIONPOINTNAME

 DistributionPointName ::= Choice 
     {
                          fullName [CON 0] IMP GeneralNames 
           nameRelativeToCRLIssuer [CON 1] IMP RelativeDistinguishedName 
     }

 **********************************************************************/

#define  DISTRIBUTIONPOINTNAME_MASK_FULLNAME                       0x00
#define  DISTRIBUTIONPOINTNAME_MASK_NAMERELATIVETOCRLISSUER        0x01
#define  DISTRIBUTIONPOINTNAME_MAXI_MASK                           0x01

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_DISTRIBUTIONPOINTNAME, *PANSC_ASN1_DISTRIBUTIONPOINTNAME;

#define  ACCESS_ANSC_ASN1_DISTRIBUTIONPOINTNAME(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_DISTRIBUTIONPOINTNAME, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_REASONFLAGS

 ReasonFlags ::= BitString 

 **********************************************************************/

typedef  ANSC_ASN1_BITSTRING ANSC_ASN1_REASONFLAGS, *PANSC_ASN1_REASONFLAGS;

#define  ACCESS_ANSC_ASN1_REASONFLAGS(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_REASONFLAGS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT

 IssuingDistributionPoint ::= Sequence 
     {
                 distributionPoint [CON 0] IMP DistributionPointName OPT
           onlyConstrainsUserCerts [CON 1] IMP BOOL DEF
             onlyConstrainsCACerts [CON 2] IMP BOOL DEF
                   onlySomeReasons [CON 3] IMP ReasonFlags OPT
                       indirectCRL [CON 4] IMP BOOL DEF
     }

 **********************************************************************/

#define  ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT_CLASS_CONTENT ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT
{
    ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT_CLASS_CONTENT
}
ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT,  *PANSC_ASN1_ISSUINGDISTRIBUTIONPOINT;

#define  ACCESS_ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_ISSUINGDISTRIBUTIONPOINT, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX

 AuthorityInfoAccessSyntax ::= SequenceOf AccessDescription  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX, *PANSC_ASN1_AUTHORITYINFOACCESSSYNTAX;

#define  ACCESS_ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_AUTHORITYINFOACCESSSYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_ACCESSDESCRIPTION

 AccessDescription ::= Sequence 
     {
                      accessMethod OID 
                    accessLocation GeneralName 
     }

 **********************************************************************/

#define  ANSC_ASN1_ACCESSDESCRIPTION_CLASS_CONTENT      ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_ACCESSDESCRIPTION
{
    ANSC_ASN1_ACCESSDESCRIPTION_CLASS_CONTENT
}
ANSC_ASN1_ACCESSDESCRIPTION,  *PANSC_ASN1_ACCESSDESCRIPTION;

#define  ACCESS_ANSC_ASN1_ACCESSDESCRIPTION(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_ACCESSDESCRIPTION, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_CRLREASON

 CRLReason ::= Enumerate 

 **********************************************************************/

typedef  ANSC_ASN1_ENUMERATE ANSC_ASN1_CRLREASON, *PANSC_ASN1_CRLREASON;

#define  ACCESS_ANSC_ASN1_CRLREASON(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_CRLREASON, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_HOLDINSTRUCTIONCODE

 HoldInstructionCode ::= OID 

 **********************************************************************/

typedef  ANSC_ASN1_OIDEN ANSC_ASN1_HOLDINSTRUCTIONCODE, *PANSC_ASN1_HOLDINSTRUCTIONCODE;

#define  ACCESS_ANSC_ASN1_HOLDINSTRUCTIONCODE(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_HOLDINSTRUCTIONCODE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_INVALIDITYDATE

 InvalidityDate ::= GeneralizedTime 

 **********************************************************************/

typedef  ANSC_ASN1_GENERALIZEDTIME ANSC_ASN1_INVALIDITYDATE, *PANSC_ASN1_INVALIDITYDATE;

#define  ACCESS_ANSC_ASN1_INVALIDITYDATE(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_INVALIDITYDATE, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_POLICYMAPPING

 PolicyMapping ::= Sequence 
     {
              issuerDomainPolicyID OID 
             subjectDomainPolicyID OID 
     }

 **********************************************************************/

#define  ANSC_ASN1_POLICYMAPPING_CLASS_CONTENT          ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_POLICYMAPPING
{
    ANSC_ASN1_POLICYMAPPING_CLASS_CONTENT
}
ANSC_ASN1_POLICYMAPPING,  *PANSC_ASN1_POLICYMAPPING;

#define  ACCESS_ANSC_ASN1_POLICYMAPPING(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_POLICYMAPPING, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_NOTICENUMBERS

 NoticeNumbers ::= SequenceOf Integer  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_NOTICENUMBERS, *PANSC_ASN1_NOTICENUMBERS;

#define  ACCESS_ANSC_ASN1_NOTICENUMBERS(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_NOTICENUMBERS, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_DELTACRLINDICATOR

 DeltaCRLIndicator ::= CRLNumber 

 **********************************************************************/

typedef  ANSC_ASN1_CRLNUMBER ANSC_ASN1_DELTACRLINDICATOR, *PANSC_ASN1_DELTACRLINDICATOR;

#define  ACCESS_ANSC_ASN1_DELTACRLINDICATOR(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_DELTACRLINDICATOR, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_ATTRIBUTESSYNTAX

 AttributesSyntax ::= SequenceOf Attribute  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_ATTRIBUTESSYNTAX, *PANSC_ASN1_ATTRIBUTESSYNTAX;

#define  ACCESS_ANSC_ASN1_ATTRIBUTESSYNTAX(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_ATTRIBUTESSYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_BIOMETRICSSYNTAX

 BiometricsSyntax ::= SequenceOf BiometricData  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_BIOMETRICSSYNTAX, *PANSC_ASN1_BIOMETRICSSYNTAX;

#define  ACCESS_ANSC_ASN1_BIOMETRICSSYNTAX(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_BIOMETRICSSYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_BIOMETRICDATA

 BiometricData ::= Sequence 
     {
               typeOfBiometricData TypeOfBiometricData 
                     hashAlgorithm AlgorithmIdentifier 
                 biometricDataHash OctetString 
                     sourceDataUri IA5String 
     }

 **********************************************************************/

#define  ANSC_ASN1_BIOMETRICDATA_CLASS_CONTENT          ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_BIOMETRICDATA
{
    ANSC_ASN1_BIOMETRICDATA_CLASS_CONTENT
}
ANSC_ASN1_BIOMETRICDATA,  *PANSC_ASN1_BIOMETRICDATA;

#define  ACCESS_ANSC_ASN1_BIOMETRICDATA(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_BIOMETRICDATA, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_TYPEOFBIOMETRICDATA

 TypeOfBiometricData ::= Choice 
     {
                    predefinedType Integer 
                  biometricDataOID OID 
     }

 **********************************************************************/

#define  TYPEOFBIOMETRICDATA_MASK_PREDEFINEDTYPE                   0x00
#define  TYPEOFBIOMETRICDATA_MASK_BIOMETRICDATAOID                 0x01
#define  TYPEOFBIOMETRICDATA_MAXI_MASK                             0x01

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_TYPEOFBIOMETRICDATA, *PANSC_ASN1_TYPEOFBIOMETRICDATA;

#define  ACCESS_ANSC_ASN1_TYPEOFBIOMETRICDATA(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_TYPEOFBIOMETRICDATA, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_QCSTATEMENTSSYNTAX

 QCStatementsSyntax ::= SequenceOf QCStatement  {}

 **********************************************************************/

typedef  ANSC_ASN1_SEQUENCEOF ANSC_ASN1_QCSTATEMENTSSYNTAX, *PANSC_ASN1_QCSTATEMENTSSYNTAX;

#define  ACCESS_ANSC_ASN1_QCSTATEMENTSSYNTAX(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_QCSTATEMENTSSYNTAX, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_QCSTATEMENT

 QCStatement ::= Sequence 
     {
                      statementOID OID 
                     statementInfo OctetString 
     }

 **********************************************************************/

#define  ANSC_ASN1_QCSTATEMENT_CLASS_CONTENT            ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_QCSTATEMENT
{
    ANSC_ASN1_QCSTATEMENT_CLASS_CONTENT
}
ANSC_ASN1_QCSTATEMENT,  *PANSC_ASN1_QCSTATEMENT;

#define  ACCESS_ANSC_ASN1_QCSTATEMENT(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_QCSTATEMENT, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_ENTRUSTVERSIONINFO

 EntrustVersionInfo ::= Sequence 
     {
                           version GeneralString 
                             usage BitString 
     }

 **********************************************************************/

#define  ANSC_ASN1_ENTRUSTVERSIONINFO_CLASS_CONTENT     ANSC_ASN1_SEQUENCE_CLASS_CONTENT

typedef  struct
_ANSC_ASN1_ENTRUSTVERSIONINFO
{
    ANSC_ASN1_ENTRUSTVERSIONINFO_CLASS_CONTENT
}
ANSC_ASN1_ENTRUSTVERSIONINFO,  *PANSC_ASN1_ENTRUSTVERSIONINFO;

#define  ACCESS_ANSC_ASN1_ENTRUSTVERSIONINFO(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_ENTRUSTVERSIONINFO, Linkage)

/**********************************************************************

 OBJECT -- ANSC_ASN1_EXTENSIONVALUE

 ExtensionValue ::= Choice 
     {
            authorityKeyIdentifier AuthorityKeyIdentifier 
                          keyUsage KeyUsage 
             privateKeyUsagePeriod PrivateKeyUsagePeriod 
                      certPolicies CertificatePolicies 
                    policyMappings PolicyMappings 
            subDirectoryAttributes SubjectDirectoryAttributes 
                  basicConstraints BasicConstraints 
                   nameConstraints NameConstraints 
                 policyConstraints PolicyConstraints 
               crlDistPointsSyntax CRLDistPointsSyntax 
                 extKeyUsageSyntax ExtKeyUsageSyntax 
              authInfoAccessSyntax AuthorityInfoAccessSyntax 
                         crlNumber CRLNumber 
          issuingDistributionPoint IssuingDistributionPoint 
                         crlReason CRLReason 
               holdInstructionCode HoldInstructionCode 
                    invalidityDate InvalidityDate 
                      isserAltName GeneralNames 
                    subjectAltName GeneralNames 
                 deltaCRLIndicator CRLNumber 
                 certificateIssuer GeneralNames 
              subjectKeyIdentifier OctetString 
                  biometricsSyntax BiometricsSyntax 
                qcStatementsSyntax QCStatementsSyntax 
                  netscapeCertType BitString 
                   netscapeComment IA5String 
                        commonName DirectoryString 
                entrustVersionInfo EntrustVersionInfo 
                caKeyCertIndexPair Integer 
                          msString MSString 
     }

 **********************************************************************/

#define  EXTENSIONVALUE_MASK_AUTHORITYKEYIDENTIFIER                0x00
#define  EXTENSIONVALUE_MASK_KEYUSAGE                              0x01
#define  EXTENSIONVALUE_MASK_PRIVATEKEYUSAGEPERIOD                 0x02
#define  EXTENSIONVALUE_MASK_CERTPOLICIES                          0x03
#define  EXTENSIONVALUE_MASK_POLICYMAPPINGS                        0x04
#define  EXTENSIONVALUE_MASK_SUBDIRECTORYATTRIBUTES                0x05
#define  EXTENSIONVALUE_MASK_BASICCONSTRAINTS                      0x06
#define  EXTENSIONVALUE_MASK_NAMECONSTRAINTS                       0x07
#define  EXTENSIONVALUE_MASK_POLICYCONSTRAINTS                     0x08
#define  EXTENSIONVALUE_MASK_CRLDISTPOINTSSYNTAX                   0x09
#define  EXTENSIONVALUE_MASK_EXTKEYUSAGESYNTAX                     0x0A
#define  EXTENSIONVALUE_MASK_AUTHINFOACCESSSYNTAX                  0x0B
#define  EXTENSIONVALUE_MASK_CRLNUMBER                             0x0C
#define  EXTENSIONVALUE_MASK_ISSUINGDISTRIBUTIONPOINT              0x0D
#define  EXTENSIONVALUE_MASK_CRLREASON                             0x0E
#define  EXTENSIONVALUE_MASK_HOLDINSTRUCTIONCODE                   0x0F
#define  EXTENSIONVALUE_MASK_INVALIDITYDATE                        0x10
#define  EXTENSIONVALUE_MASK_ISSERALTNAME                          0x11
#define  EXTENSIONVALUE_MASK_SUBJECTALTNAME                        0x12
#define  EXTENSIONVALUE_MASK_DELTACRLINDICATOR                     0x13
#define  EXTENSIONVALUE_MASK_CERTIFICATEISSUER                     0x14
#define  EXTENSIONVALUE_MASK_SUBJECTKEYIDENTIFIER                  0x15
#define  EXTENSIONVALUE_MASK_BIOMETRICSSYNTAX                      0x16
#define  EXTENSIONVALUE_MASK_QCSTATEMENTSSYNTAX                    0x17
#define  EXTENSIONVALUE_MASK_NETSCAPECERTTYPE                      0x18
#define  EXTENSIONVALUE_MASK_NETSCAPECOMMENT                       0x19
#define  EXTENSIONVALUE_MASK_COMMONNAME                            0x1A
#define  EXTENSIONVALUE_MASK_ENTRUSTVERSIONINFO                    0x1B
#define  EXTENSIONVALUE_MASK_CAKEYCERTINDEXPAIR                    0x1C
#define  EXTENSIONVALUE_MASK_MSSTRING                              0x1D
#define  EXTENSIONVALUE_MAXI_MASK                                  0x1D

typedef  ANSC_ASN1_CHOICE ANSC_ASN1_EXTENSIONVALUE,  *PANSC_ASN1_EXTENSIONVALUE;

#define  ACCESS_ANSC_ASN1_EXTENSIONVALUE(p)    \
         ACCESS_CONTAINER(p, ANSC_ASN1_EXTENSIONVALUE, Linkage)


#endif  /*_ANSC_ASN1_EXTENSIONS_INTERFACE_H*/


