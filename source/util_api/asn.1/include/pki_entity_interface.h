/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: pki_entity_interface.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        This interface is for the entity of PKI implementation.

        The entity is responsible for generating key pair, pkcs10
        certificate request, self-signed certificate.

    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        Bin Zhu

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   08/13/2002  initial revision
        *   12/01/2003  add name field support

 **********************************************************************/


#ifndef  _PKI_ENTITY_INTERFACE_H
#define  _PKI_ENTITY_INTERFACE_H

#include "pki_interface.h"
#include "crypt_proc.h"

typedef ANSC_STATUS
(*ENTITY_REMOVE)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 *  Get the total count of the CA chain
 ***************************************************************/
typedef ULONG
(*ENTITY_GET_CA_COUNT)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 *  Get the CA cert with given index;
 **************************************************************/
typedef ANSC_HANDLE
(*ENTITY_GET_CA_BYINDEX)
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       ulIndex
    );

/**************************************************************
 * Generate handle procs, such as PKCS10, Selfsigned Cert Handles
 *
 * NOTE: The caller is responsible to free it
 *
 * pHandle->Free(pHandle);
 **************************************************************/
typedef ANSC_HANDLE
(*ENTITY_CREATE_HANDLE)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 * Generate Encoding, such as PKCS10, Selfsigned Cert encodings
 *
 * NOTE: The caller is responsible to free the buffer
 *
 * AnscFreeMemory(...)
 **************************************************************/
typedef PUCHAR
(*ENTITY_CREATE_ENCODING)
    (
        ANSC_HANDLE                 hThisObject,
        PULONG                      pLength
    );

/**************************************************************
 * Get certain handle
 **************************************************************/
typedef ANSC_HANDLE
(*ENTITY_GET_HANDLE)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 * Set certain handle
 **************************************************************/
typedef ANSC_STATUS
(*ENTITY_SET_CERT)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert
    );

typedef ANSC_STATUS
(*ENTITY_SET_ENCODING)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

typedef BOOLEAN
(*ENTITY_VERIFY_SIGNATURE)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pDataWillBeSigned,
        ULONG                       lengthOfData,
        SIGNATURE_TYPE              SignatureType,
        PUCHAR                      pSignature,
        ULONG                       signLength
    );

/* Get/Set string apis */
typedef PCHAR
(*ENTITY_GET_STRING)
    (
        ANSC_HANDLE                 hThisObject
    );

typedef ANSC_STATUS
(*ENTITY_SET_STRING)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pString
    );    

/**************************************************************
 *
 * Export the cert and private key info
 *
 * This function will create memory to holde the cert
 * and private key info encoding, the caller is responsible to 
 * free them.
 *
 *  If ppCertEncoding == NULL, cert encoding is not required;
 *  If ppPriKeyInfo   == NULL, priKeyInfo encoding is not required;
 *
 **************************************************************/
typedef ANSC_STATUS
(*ENTITY_EXPORT_INFO)
    (
        ANSC_HANDLE                 hThisObject,
        PVOID*                      ppCertEncoding,
        PULONG                      pLenOfCert,
        PVOID*                      ppPriKeyInfo,
        PULONG                      pLenOfKeyInfo
    );

typedef ANSC_STATUS
(*ENTITY_EXPORT_TO_FILE)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pCertFile,
        PCHAR                       pKeyInfoFile
    );

typedef ANSC_HANDLE
(*ENTITY_CREATE_PKCS12_HANDLE)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pPass,
        BOOLEAN                     bExportCA
    );

typedef PUCHAR
(*ENTITY_CREATE_PKCS12_ENCODING)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pPass,
        BOOLEAN                     bExportCA,
        PULONG                      pLength
    );

typedef PUCHAR
(*ENTITY_CREATE_CERTENCODING)
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bHasKeyIdentifier,
        PULONG                      pLength
    );

typedef ANSC_HANDLE
(*ENTITY_CREATE_CERT)
    (
        ANSC_HANDLE                 hThisObject,
        BOOLEAN                     bHasKeyIdentifier
    );

typedef ANSC_STATUS
(*ENTITY_IMPORT_PKCS12)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pPKCS12Encoding,
        ULONG                       length,
        PCHAR                       pPassword
    );

typedef ANSC_STATUS
(*ENTITY_SET_PKCS7)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

/**********************************************************************
 *
 * Issue Certificate to user entity, if it's a CA;
 *
 **********************************************************************/
typedef ANSC_STATUS
(*ENTITY_ISSUER_CERT)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hUserObject,
        ULONG                       nYears,       /* Validity time */
        ULONG                       ulKeyUsage,
        BOOLEAN                     bAddSubKeyIdenExtension,
        BOOLEAN                     bIsCA,
        LONG                        pathLength
    );

#define  PKI_ENTITY_CLASS_CONTENT                                     \
    /* start of object class content */                               \
    SINGLE_LINK_ENTRY               Linkage;                          \
    PALCERTIFICATE_ATTRIBUTE        pCertAttr;                        \
    ANSC_HANDLE                     hContainerContext;                \
    ANSC_HANDLE                     hCryptoSSL;                       \
    ANSC_HANDLE                     hKeyParam;                        \
    CHAR                            pName[MAXI_ENTITY_NAME_BUFFER];   \
    PCRYPT_API_STRUCT               hCryptAPI;                        \
    ANSC_HANDLE                     hUserCert;                        \
    PUCHAR                          pCertEncoding;                    \
    ULONG                           uLength;                          \
    SLIST_HEADER                    sCAList;                          \
                                                                      \
    ENTITY_REMOVE                   Remove;                           \
    ENTITY_REMOVE                   RemoveEntityCert;                 \
    CRYPT_GETKEYTYPE_PROC           GetKeyType;                       \
    CRYPT_GETKEYLENGTH_PROC         GetKeyLength;                     \
    CRYPT_GETPUBLICKEY_PROC         GetPublicKeyInfo;                 \
    CRYPT_SIGNDATA_PROC             SignData;                         \
    ENTITY_VERIFY_SIGNATURE         Verify;                           \
    CRYPT_DECRYPTDATA_PROC          DecryptData;                      \
    CRYPT_DECRYPTDATA_PROC          EncryptData;                      \
    ENTITY_GET_CA_COUNT             GetCACount;                       \
    ENTITY_GET_CA_BYINDEX           GetCAByIndex;                     \
    ENTITY_CREATE_HANDLE            CreatePKCS10;                     \
    ENTITY_CREATE_ENCODING          CreatePKCS10Encoding;             \
    ENTITY_GET_HANDLE               GetEntityCert;                    \
    ENTITY_SET_CERT                 SetCertHandle;                    \
    ENTITY_SET_ENCODING             SetIssuedCert;                    \
    ENTITY_SET_ENCODING             SetPrivateKeyInfo;                \
    ENTITY_ISSUER_CERT              IssueCertificate;                 \
    ENTITY_EXPORT_INFO              ExportInfo;                       \
    ENTITY_EXPORT_TO_FILE           ExportToFile;                     \
    /* advanced functions for pki_entity */                           \
    PPKCS12_UTILITY_INTERFACE       pUtilityApi;                      \
    ENTITY_IMPORT_PKCS12            ImportPKCS12;                     \
    ENTITY_CREATE_PKCS12_HANDLE     ExportPKCS12Handle;               \
    ENTITY_CREATE_PKCS12_ENCODING   ExportPKCS12Encoding;             \
    ENTITY_CREATE_CERT              CreateSelfSignedCert;             \
    ENTITY_CREATE_CERTENCODING      CreateSelfSignedCertEncoding;     \
    ENTITY_SET_PKCS7                SetIssuedPKCS7Certs;              \
    /* get/set name */                                                \
    ENTITY_GET_STRING               GetName;                          \
    ENTITY_SET_STRING               SetName;                          \
    /* end of object class content */                                 \


typedef  struct
_PKI_CLIENT_ENTITY
{
    PKI_ENTITY_CLASS_CONTENT
}
PKI_CLIENT_ENTITY,  *PPKI_CLIENT_ENTITY;

#define  ACCESS_PKI_CLIENT_ENTITY(p)    \
         ACCESS_CONTAINER(p, PKI_CLIENT_ENTITY, Linkage)


#endif  /*_PKI_ENTITY_INTERFACE_H*/


