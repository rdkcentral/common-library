/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/


/**********************************************************************

    MODULE:	CERT_EXPORTED_API.H

        For Internet Certification Framework DLL,
        by Cisco Systems, Inc.

    ---------------------------------------------------------------

    FUNCTIONAL DESCRIPTION:

        This header file defines all the exported API functions
        provided by Cisco Systems CERT DLL.

    ---------------------------------------------------------------

    ENVIRONMENT:

        Win32 Platform.

    ---------------------------------------------------------------

    AUTHOR:

        Xuechen Yang

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   07/01/98    initial revision
        *   12/20/03    add api to get the nextupdatetime of CRL
        *   08/06/04    add api "ALCertIsKeyMatchable" 

**********************************************************************/


#ifndef     _CERT_EXPORTED_API_
#define     _CERT_EXPORTED_API_

/***********************************************************
          GENERATED BY VISUAL STUDIO PROJECT WIZARD
***********************************************************/

/*
 * The following ifdef block is the standard way of creating macros which make exporting from a DLL simpler. All files
 * within this DLL are compiled with the AL_CERT_EXPORTS symbol defined on the command line. this symbol should not be
 * defined on any project that uses this DLL. This way any other project whose source files include this file see
 * AL_CERT_API functions as being imported from a DLL, wheras this DLL sees symbols defined with this macro as being
 * exported.
 */
#define AL_CERT_API

#ifndef PPUCHAR
typedef PUCHAR                                      *PPUCHAR;
#endif

/***********************************************************
           DEFINITION OF PKI CONSTRUCTION MESSAGE
***********************************************************/

#include "cw_vpn_sakm.h"

/*
 * SAKM will fill up this structure and pass it to CERT DLL during initialization
 */
typedef  struct
_CERT_USER_CHARACTERISTICS
{
    LPSTR       InstallationPathName;               /* path name of the VPCom installation directory*/
    AL_HANDLE   hUserContext;                       /* opaque handle passed by SAKM or whatever*/
    BOOLEAN     bServer;                            /* it's TRUE for certification authority; FALSE for normal user*/
    AL_HANDLE   hCertContext;                       /* hold the context memory block for Cisco Systems CERT DLL*/
}
CERT_USER_CHARACTERISTICS,  *PCERT_USER_CHARACTERISTICS;


#ifdef  __cplusplus
extern  "C" {
#endif


/***********************************************************
              CONSTRUCTION / DESTRUCTION APIS
***********************************************************/

AL_STATUS  AL_CERT_API
ALCertInitialize
    (
        AL_HANDLE                   hUserContext
    );

AL_STATUS  AL_CERT_API
ALCertUnload
    (
        AL_HANDLE                   hCertContext
    );

AL_STATUS  AL_CERT_API
ALCertAddTrustedCA
    (
        AL_HANDLE                   hCertContext,
        PVOID                       pCertEncoding,
        ULONG                       ulEncodingSize,
        PAL_HANDLE                  phCertHandle
    );

AL_STATUS  AL_CERT_API
ALCertAddSubject
    (
        AL_HANDLE                   hCertContext,
        PVOID                       pCertEncoding,
        ULONG                       ulEncodingSize,
        PVOID                       pPrivateKeyEncoding,
        ULONG                       ulKeyEncodingSize,
        PAL_HANDLE                  phCertHandle
    );

AL_STATUS  AL_CERT_API
ALCertRemoveTrustedCA
    (
        AL_HANDLE                   hCertHandle
    );

AL_STATUS  AL_CERT_API
ALCertRemoveSubject
    (
        AL_HANDLE                   hCertHandle
    );

AL_STATUS  AL_CERT_API
ALCertAddCRL
    (
        AL_HANDLE                   hCAHandle,
        PVOID                       pCRLEncoding,
        ULONG                       ulEncodingSize
    );

AL_STATUS  AL_CERT_API
ALCertRemoveCRL
    (
        AL_HANDLE                   hCAHandle
    );

AL_STATUS  AL_CERT_API
ALCertGetCRLNextUpdateTime
    (
        AL_HANDLE                   hCAHandle,
        ANSC_HANDLE                 hTime       /* PANSC_UNIVERSAL_TIME */
    );

/***********************************************************
           CERTIFICATE VERIFICATION API FUNCTIONS
***********************************************************/

AL_STATUS  AL_CERT_API
ALCertVerify
    (
        AL_HANDLE                   hCertContext,
        ULONG                       ulCertPathLength,
        PVOID*                      pCertArray,
        PULONG                      pulCertSizeArray,
        PIKE_COMMON_ID              pSubjectID,
        BOOLEAN                     bCheckId        /*= FALSE*/ /*BAKEOFF*/
    );


/***********************************************************
             CERTIFICATE REQUEST API FUNCTIONS
***********************************************************/

AL_STATUS  AL_CERT_API
ALCertAcquireCertInformation
    (
        AL_HANDLE                   hCertContext,
        PAL_INTERNAL_PKI_INFO       pInternalPKIInfo
    );

AL_STATUS  AL_CERT_API
ALCertExtractCommonNameFromDN
    (
        PVOID                       pDNEncoding,
        ULONG                       ulEncodingSize,
        PCHAR                       pCommonNameString
    );

AL_STATUS  AL_CERT_API
ALCertAcquireCertificationPath
    (
        AL_HANDLE                   hCertContext,
        UCHAR                       ucCertEncoding,
        PVOID                       pCertificateRequirement,
        ULONG                       ulRequirementSize,
        AL_INTERNAL_PKI_KEY_TYPE    KeyType,
        PAL_HANDLE                  phCertPathContext,
        PULONG                      pulCertNumber,
        BOOLEAN                     bIncludeRootCA
    );

AL_STATUS  AL_CERT_API
ALCertAcquireCertificateUnit
    (
        AL_HANDLE                   hCertPathContext,
        ULONG                       ulIndex,
        PUCHAR                      pucCertEncoding,
        PVOID                       pCertUnit,
        PULONG                      pulCertUnitSize,
        PAL_HANDLE                  phCertHandle,
        BOOLEAN                     bIncludeRootCA
    );

AL_STATUS  AL_CERT_API
ALCertAcquireCertificateUnitByHandle
    (
        AL_HANDLE                   hCertHandle,
        PUCHAR                      pucCertEncoding,
        PVOID                       pCertUnit,
        PULONG                      pulCertUnitSize
    );

AL_STATUS  AL_CERT_API
ALCertGetKeyTypeByHandle
    (
        AL_HANDLE                   hCertHandle,
        PAL_INTERNAL_PKI_KEY_TYPE   pKeyType
    );

AL_STATUS  AL_CERT_API
ALCertAcquireIDByHandle
    (
        AL_HANDLE                   hCertHandle,
        PIKE_COMMON_ID              pSubjectID
    );

AL_STATUS  AL_CERT_API
ALCertAcquireCANameByHandle
    (
        AL_HANDLE                   hCertHandle,
        PUCHAR                      pucCertEncoding,
        PVOID                       pNameEncoding,
        PULONG                      pulNameEncodingSize
    );

/********************************************************************************
 *
 * Server functions;
 *
 ********************************************************************************/
AL_STATUS  AL_CERT_API
ALCertAddPKIServer
    (
        AL_HANDLE                   hCertContext,
        PAL_PKI_SERVER_INFO         pPKIServerInfo,
        PAL_HANDLE                  phServerHandle
    );

AL_STATUS  AL_CERT_API
ALCertImportPKIServer
    (
        AL_HANDLE                   hCertContext,
        PVOID                       pCertEncoding,
        ULONG                       ulEncodingSize,
        PVOID                       pPrivateKeyEncoding,
        ULONG                       ulKeyEncodingSize,
        PAL_HANDLE                  phServerHandle
    );

AL_STATUS  AL_CERT_API
ALCertRemovePKIServer
    (
        AL_HANDLE                   hServerHandle
    );

AL_STATUS  AL_CERT_API
ALCertRetrievePKIServerCert
    (
        AL_HANDLE                   hServerHandle,
        PVOID                       pCertEncoding,
        PULONG                      pulEncodingSize,
        PVOID                       pPrivateKeyEncoding,
        PULONG                      pulKeySize
    );

AL_STATUS  AL_CERT_API
ALCertSignPKIClient
    (
        AL_HANDLE                   hServerHandle,
        PAL_PKI_CLIENT_INFO         pPKIClientInfo,
        PVOID                       pCertEncoding,
        PULONG                      pulEncodingSize,
        PVOID                       pPrivateKeyEncoding,
        PULONG                      pulKeyEncodingSize
    );

/********************************************************************************
    Prototype:

            AL_STATUS
            AL_CERT_API
            ALCertCreateEntity
            (
                AL_HANDLE                   hCertContext,
                PASN1_CERTIFICATE_ATTRIBUTE pAttribute,
                PAL_HANDLE                  phSubjectHandle
            )
 
    Parameter:
                AL_HANDLE                   hCertContext,
                Handle created in ALCertInitialize

                PASN1_CERTIFICATE_ATTRIBUTE         pAttribute
                The subject name attributes of Certificate request

                PAL_HANDLE                  phSubjectHandle
                The returned Subject handle if succeeded

    Comments:
                Create a subject entity with given attribute and add to the list

    Return:
                AL_STATUS_SUCCESS if succeeded

 *******************************************************************************/
AL_STATUS
AL_CERT_API
ALCertCreateEntity
(
    AL_HANDLE                   hCertContext,
    PASN1_CERTIFICATE_ATTRIBUTE pAttribute,
    PAL_HANDLE                  phSubjectHandle
);

/********************************************************************************
    Prototype:

            AL_STATUS
            AL_CERT_API
            ALCertCreatePKCS10CertificateRequest
            (
                AL_HANDLE                           hSubjectHandle
                PPUCHAR                             ppEncoding,
                PULONG                              pLength
            )
 
    Parameter:
                AL_HANDLE                           hSubjectHandle
                The subject handle returned from ALCertCreateEntity

                PPUCHAR                             ppEncoding
                The pointer of output buffer of Encoded PKCS10 request.

                PULONG                              pLength
                The buffer of the size of encoded PKCS10 request;

    Return:
                If the PKCS10 is generated and encoded successfully, 
                return AL_STATUS_SUCCESS;

    Comments:
                1.  If AL_CERT_NO_ENOUGH_BUFFER returned, the required memory
                    size will be set in the parameter "pLength";
                2.  The output encoding data is in binary format, if BASE64 format
                    is required, please call another API - ALCertMime64Encoding

 *******************************************************************************/
AL_STATUS
AL_CERT_API
ALCertCreatePKCS10CertificateRequest
(
    AL_HANDLE                           hSubjectHandle,
    PPUCHAR                             ppEncoding,
    PULONG                              pLength
);

/**********************************************************************

    prototyp:

        AL_STATUS
        AL_CERT_API
        ALCertGetPrivateKeyInfo
            (
                AL_HANDLE                   hSubjectHandle,
                PUCHAR*                     ppKeyEncoding,
                PULONG                      pLength,
                PULONG                      pKeyType,
                PULONG                      pKeyLength
            );

    Arguments:

        AL_HANDLE                   hSubjectHandle,
        The subject handle returned from ALCertCreateEntity

        ppKeyEncoding
        Pointer to the caller allocated buffer to receive the private key

        pLength
        [IN]     specifies the maximum size the buffer can hold
        [OUT] receives the length of private key

        pKeyType
        To receive the key type: PKI_RSA_KEY or PKI_DSA_KEY

        pKeyLength
        To receive the key length in bytes

**********************************************************************/
AL_STATUS
AL_CERT_API
ALCertGetPrivateKeyInfo
    (
        AL_HANDLE                   hSubjectHandle,
        PUCHAR*                     ppKeyEncoding,
        PULONG                      pLength,
        PULONG                      pKeyType,
        PULONG                      pKeyLength
    );

/**********************************************************************

    prototyp:

        AL_STATUS
        AL_CERT_API
        ALCertSetIssuedCertificate
            (
                AL_HANDLE                   hSubjectHandle,
                PUCHAR                      pCertEncoding,
                ULONG                       length
            );

    Arguments:

        AL_HANDLE                   hSubjectHandle,
        The subject handle returned from ALCertCreateEntity

        PUCHAR                      pCertEncoding,
        The encoding of the issued certificate

        ULONG                       length
        The size of the encoding

**********************************************************************/
AL_STATUS
AL_CERT_API
ALCertSetIssuedCertificate
    (
        AL_HANDLE                   hSubjectHandle,
        PUCHAR                      pCertEncoding,
        ULONG                       length
    );

/**********************************************************************

    prototyp:

        AL_STATUS
        AL_CERT_API
        ALCertSetIssuedPKCS7CertChain
            (
                AL_HANDLE                   hSubjectHandle,
                PUCHAR                      pCertEncoding,
                ULONG                       length
            );

    Arguments:

        AL_HANDLE                   hSubjectHandle,
        The subject handle returned from ALCertCreateEntity

        PUCHAR                      pCertEncoding,
        The encoding of the PKCS7 message

        ULONG                       length
        The size of the encoding

**********************************************************************/
AL_STATUS
AL_CERT_API
ALCertSetIssuedPKCS7CertChain
    (
        AL_HANDLE                   hSubjectHandle,
        PUCHAR                      pCertEncoding,
        ULONG                       length
    );

/********************************************************************************
    Prototype:

            BOOLEAN
            AL_CERT_API
            ALCertIsKeyMatchable
            (
                AL_HANDLE                   hCertContext,
                PVOID                       pCertEncoding,
                ULONG                       ulCertSize,
                PVOID                       pCertRequest,
                ULONG                       uRequestSize
            )
 
    Parameter:
                AL_HANDLE                   hCertContext,
                Handle created in ALCertInitialize

                PVOID                       pCertEncoding,
                ULONG                       ulCertSize,
                Certificate information

                PVOID                       pCertRequest,
                ULONG                       uRequestSize,
                PKCS10 request info which will be the output of 
                "ALCertCreatePKCS10CertificateRequest"

    Return:
                TRUE OR FALSE

 *******************************************************************************/
BOOLEAN
AL_CERT_API
ALCertIsKeyMatchable
    (
        AL_HANDLE                   hCertContext,
        PVOID                       pCertEncoding,
        ULONG                       ulCertSize,
        PVOID                       pCertRequest,
        ULONG                       uRequestSize
    );

/********************************************************************************
    Prototype:

            AL_STATUS
            AL_CERT_API
            ALCertMime64Encoding
            (
                PVOID                               pInputData, 
                ULONG                               ulSizeOfInputData,
                PVOID                               pOutputData,
                PULONG                              pSizeOfOutputData
            )
 
    Parameter:	
                PVOID                               pInputData, 
                The input binary data;

                ULONG                               ulSizeOfInputData,
                The size of pInputData;

                PVOID                               pOutputData, 
                The output buffer;

                ULONG                               pSizeOfOutputData,
                The buffer of size of pOutputData;

    Return:
                Return AL_STATUS_SUCCESS if encode successfully;
                otherwise return the error encountered.
                Error messages include:
                AL_CERT_NO_ENOUGH_BUFFER
                AL_CERT_BASE64_FAILURE

    Comments:
                If AL_CERT_NO_ENOUGH_BUFFER returned, the required memory
                size will be set in the parameter "pSizeOfOutputData";

 *******************************************************************************/
AL_STATUS
AL_CERT_API
ALCertMime64Encoding
(
    PVOID                               pInputData, 
    ULONG                               ulSizeOfInputData,
    PVOID                               pOutputData,
    PULONG                              pSizeOfOutputData
);


/********************************************************************************
    Prototype:

            AL_STATUS
            AL_CERT_API
            ALCertMime64Decoding
            (
                PVOID                               pInputData, 
                ULONG                               ulSizeOfInputData,
                PVOID                               pOutputData,
                PULONG                              pSizeOfOutputData
            )
 
    Parameter:	
                PVOID                               pInputData, 
                The input BASE64 data;

                ULONG                               ulSizeOfInputData,
                The size of pInputData;

                PVOID                               pOutputData, 
                The output buffer;

                ULONG                               pSizeOfOutputData,
                The buffer of size of pOutputData;

    Return:
                Return AL_STATUS_SUCCESS if decode successfully;

    Comments:
                If AL_CERT_NO_ENOUGH_BUFFER returned, the required memory
                size will be set in the parameter "pSizeOfOutputData";

 *******************************************************************************/
AL_STATUS
AL_CERT_API
ALCertMime64Decoding
(
    PVOID                               pInputData, 
    ULONG                               ulSizeOfInputData,
    PVOID                               pOutputData,
    PULONG                              pSizeOfOutputData
);

#define ALASNMGRMime64Encoding          ALCertMime64Encoding
#define ALASNMGRMime64Decoding          ALCertMime64Decoding

#ifdef  __cplusplus
}
#endif


#endif

