/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/**********************************************************************

    MODULE: alcert_interface.h

        ASN.1 ANSC Code Generated by Cisco Systems, Inc.

    ---------------------------------------------------------------

    DESCRIPTION:

        This interface is for the ALCert implementation

    ---------------------------------------------------------------

    ENVIRONMENT:

        platform independent

    ---------------------------------------------------------------

    AUTHOR:

        Bin Zhu

    ---------------------------------------------------------------

    REVISION HISTORY:

        *   09/10/2002  initial revision
        *   11/26/2003  add save/load functions;
        *   11/27/2003  add check cert status function;
        *   12/01/2003  add search ca/entity with name.

 **********************************************************************/


#ifndef  _ALCERT_INTERFACE_H
#define  _ALCERT_INTERFACE_H

/**************************************************************
 *  Remove functions
 ***************************************************************/

typedef ANSC_STATUS
(*ALCERT_REMOVE)
    (
        ANSC_HANDLE                 hThisObject
    );

typedef ANSC_STATUS
(*ALCERT_REMOVE_CA)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hEntity,
        BOOLEAN                     bRovIssuedCert
    );

typedef ANSC_STATUS
(*ALCERT_REMOVE_ACT)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hEntity
    );

typedef ANSC_STATUS
(*ALCERT_REMOVE_CRL)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hEntity
    );

/**************************************************************
 *  Get the total count of the CA chain
 ***************************************************************/
typedef ULONG
(*ALCERT_GET_COUNT)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 *  Get the CA cert with given index;
 **************************************************************/
typedef ANSC_HANDLE
(*ALCERT_GET_BYINDEX)
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       ulIndex
    );

/**************************************************************
 * 
 * Add subject
 *
 **************************************************************/
typedef ANSC_HANDLE
(*ALCERT_ADD_SUBJECT)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pName,
        PUCHAR                      pCertEncoding,
        ULONG                       certLength,
        PUCHAR                      pKeyEncoding,
        ULONG                       keyLength
    );

typedef ANSC_STATUS
(*ALCERT_ADD_SUBJECT_ENTITY)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity
    );

typedef ANSC_STATUS
(*ALCERT_SET_CERT)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

/**************************************************************
 * 
 * Add CA certificate
 *
 **************************************************************/
typedef ANSC_HANDLE
(*ALCERT_ADD_HANDLE)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pName,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

/**************************************************************
 * 
 * manage functions
 *
 **************************************************************/
typedef ANSC_HANDLE
(*ALCERT_LOOKFOR_ISSUER)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert
    );

typedef ANSC_STATUS
(*ALCERT_VERIFY_CERT)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert,
        ULONG                       pathIndex
    );

/**************************************************************
 *
 * The CA Entity will verify it before add the CRL.
 *
 * return ANSC_STATUS_SUCCESS when succeded.
 *
 **************************************************************/
typedef ANSC_STATUS
(*ALCERT_ADD_CRL)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCAEntity,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

/**************************************************************
 * 
 * Get/Set Handle
 *
 **************************************************************/
typedef ANSC_HANDLE
(*ALCERT_GET_HANDLE)
    (
        ANSC_HANDLE                 hThisObject
    );

typedef ANSC_STATUS
(*ALCERT_SET_HANDLE)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity
    );

typedef ANSC_HANDLE
(*ALCERT_SEARCH_ENTITY)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pEncoding,
        ULONG                       length
    );

typedef ANSC_HANDLE
(*ALCERT_GET_BYNAME)
    (
        ANSC_HANDLE                 hThisObject,
        PCHAR                       pName
    );

/**************************************************************
 * 
 * Operations 
 *
 **************************************************************/
typedef ANSC_STATUS
(*ALCERT_OPERATION)
    (
        ANSC_HANDLE                 hThisObject
    );

/**************************************************************
 * 
 * Verify
 *
 **************************************************************/
typedef ANSC_STATUS
(*ALCERT_VERIFY)
    (
        ANSC_HANDLE                 hThisObject,
        ULONG                       ulCertPathLength,
        PVOID*                      pCertArray,
        PULONG                      pulCertSizeArray,
        ANSC_HANDLE                 pSubjectID,
        BOOLEAN                     bCheckId,        /* BAKEOF */
        BOOLEAN                     bCheckTime       /* Time is not required for KB5 */
    );

/**************************************************************
 * 
 * acquire the cert path
 *
 **************************************************************/
typedef ANSC_STATUS
(*ALCERT_ACQUIRE_PATH)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity,
        PULONG                      pulCertNumber,
        PVOID*                      pCertArray,
        PULONG                      pulCertSizeArray,
        BOOLEAN                     bIncludeRootCA
    );

/*************************************************************
 *
 *  Get the path length for certain subject entity;
 *
 *************************************************************/
typedef ULONG
(*ALCERT_GET_PATH)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity
    );

/*************************************************************
 *
 *  Get the CA entity in the certain index of cert chain
 *
 *************************************************************/
typedef ANSC_HANDLE
(*ALCERT_LOOKFOR_CA)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hClientEntity,
        UINT                        ulIndex
    );

/*************************************************************
 *
 *  Search for the subject entity with the given issuer name
 *
 *************************************************************/
typedef ANSC_HANDLE
(*ALCERT_LOOKFOR_ENTITY)
    (
        ANSC_HANDLE                 hThisObject,
        PUCHAR                      pIssuerName,
        ULONG                       length
    );

/*************************************************************
 *
 *  Search for the subject entity with key type
 *
 *************************************************************/
typedef ANSC_HANDLE
(*ALCERT_LOOKFOR_ENTITY_2)
    (
        ANSC_HANDLE                 hThisObject,
        PKI_KEY_TYPE                keyType
    );

/*************************************************************
 *
 *  Search for the subject entity with the same key of the given cert
 *
 *************************************************************/
typedef ANSC_HANDLE
(*ALCERT_LOOKFOR_ENTITY_3)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCert
    );

/*************************************************************
 *
 *  Storage functions
 *
 *************************************************************/
typedef ANSC_STATUS
(*ALCERT_LOAD)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hSysStorage
    );

typedef ANSC_STATUS
(*ALCERT_SAVE)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hSysStorage
    );

/*************************************************************
 *
 *  Update CRL
 *
 *************************************************************/
typedef ANSC_STATUS
(*ALCERT_UPDATE_CRL)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCAHandle
    );


/*************************************************************
 *
 *  Check Certificate Status
 *
 *************************************************************/
typedef ULONG
(*ALCERT_GET_CERT_STATUS)
    (
        ANSC_HANDLE                 hThisObject,
        ANSC_HANDLE                 hCertHandle
    );

#define  ALCERT_CLASS_CONTENT                                         \
    /* start of object class content */                               \
    SINGLE_LINK_ENTRY               Linkage;                          \
    ANSC_HANDLE                     hContainerContext;                \
    ANSC_LOCK                       ClientLock;                       \
    SLIST_HEADER                    sClientList;                      \
    ANSC_LOCK                       CALock;                           \
    SLIST_HEADER                    sCAList;                          \
                                                                      \
    ALCERT_REMOVE                   Remove;                           \
    /* CA related functions */                                        \
    ALCERT_GET_COUNT                GetCACount;                       \
    ALCERT_GET_BYINDEX              GetCACertByIndex;                 \
    ALCERT_GET_BYINDEX              GetCAEntityByIndex;               \
    ALCERT_SEARCH_ENTITY            SearchCAEntityByEncoding;         \
    ALCERT_SEARCH_ENTITY            SearchUserByEncoding;             \
    ALCERT_GET_BYNAME               SearchCAByName;                   \
    ALCERT_ADD_HANDLE               AddTrustedCA;                     \
    ALCERT_ADD_CRL                  AddCRL;                           \
    ALCERT_REMOVE_CA                RemoveCAEntity;                   \
    ALCERT_REMOVE_CRL               RemoveCRL;                        \
    ALCERT_OPERATION                RemoveAllCAs;                     \
    ALCERT_VERIFY                   VerifyCertChain;                  \
    ALCERT_LOOKFOR_ISSUER           LookforIssuerEntity;              \
    ALCERT_VERIFY_CERT              VerifyUserCert;                   \
    /* Subject releated functions */                                  \
    ALCERT_ADD_SUBJECT              AddSubjectWithCert;               \
    ALCERT_ADD_SUBJECT_ENTITY       AddSubjectEntity;                 \
    ALCERT_GET_COUNT                GetClientCount;                   \
    ALCERT_GET_BYINDEX              GetClientByIndex;                 \
    ALCERT_GET_BYNAME               SearchEntityByName;               \
    ALCERT_SET_CERT                 SetSubjectCert;                   \
    ALCERT_REMOVE_ACT               RemoveClientEntity;               \
    ALCERT_OPERATION                RemoveAllClients;                 \
    /* other functions */                                             \
    ALCERT_ACQUIRE_PATH             AcquireCertPath;                  \
    ALCERT_GET_PATH                 GetCertChainPath;                 \
    ALCERT_LOOKFOR_CA               LookforCAInPath;                  \
    ALCERT_LOOKFOR_ENTITY           LookforEntityWithIssuerName;      \
    ALCERT_LOOKFOR_ENTITY_2         LookforEntityWithKeyType;         \
    ALCERT_LOOKFOR_ENTITY_3         LookforEntityWithPubKey;          \
    /* load/save functions */                                         \
    ALCERT_LOAD                     Load;                             \
    ALCERT_SAVE                     Save;                             \
    ALCERT_GET_CERT_STATUS          GetCertStatus;                    \
    /* update crl */                                                  \
    ALCERT_UPDATE_CRL               UpdateCACrl;                      \
    /* end of object class content */                                 \


typedef  struct
_ALCERT_CONTEXT
{
    ALCERT_CLASS_CONTENT
}
ALCERT_CONTEXT,  *PALCERT_CONTEXT;

#define  ACCESS_ALCERT_CONTEXT(p)    \
         ACCESS_CONTAINER(p, ALCERT_CONTEXT, Linkage)


#endif  /*_AL_CERT_INTERFACE_H*/


